// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: todogrpc/todo.proto

package todogrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoMamagementClient is the client API for TodoMamagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoMamagementClient interface {
	CreateTodoItem(ctx context.Context, in *CreateTodo, opts ...grpc.CallOption) (*Todo, error)
	GetTodoLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TodoList, error)
	GetTodoItemById(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*Todo, error)
	UpdateTodoItem(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error)
	DeleteTodoItem(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*ConfirmMessage, error)
}

type todoMamagementClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoMamagementClient(cc grpc.ClientConnInterface) TodoMamagementClient {
	return &todoMamagementClient{cc}
}

func (c *todoMamagementClient) CreateTodoItem(ctx context.Context, in *CreateTodo, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/todoDemo.TodoMamagement/CreateTodoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoMamagementClient) GetTodoLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TodoList, error) {
	out := new(TodoList)
	err := c.cc.Invoke(ctx, "/todoDemo.TodoMamagement/GetTodoLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoMamagementClient) GetTodoItemById(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/todoDemo.TodoMamagement/GetTodoItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoMamagementClient) UpdateTodoItem(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/todoDemo.TodoMamagement/UpdateTodoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoMamagementClient) DeleteTodoItem(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*ConfirmMessage, error) {
	out := new(ConfirmMessage)
	err := c.cc.Invoke(ctx, "/todoDemo.TodoMamagement/DeleteTodoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoMamagementServer is the server API for TodoMamagement service.
// All implementations must embed UnimplementedTodoMamagementServer
// for forward compatibility
type TodoMamagementServer interface {
	CreateTodoItem(context.Context, *CreateTodo) (*Todo, error)
	GetTodoLists(context.Context, *emptypb.Empty) (*TodoList, error)
	GetTodoItemById(context.Context, *TodoId) (*Todo, error)
	UpdateTodoItem(context.Context, *Todo) (*Todo, error)
	DeleteTodoItem(context.Context, *TodoId) (*ConfirmMessage, error)
	mustEmbedUnimplementedTodoMamagementServer()
}

// UnimplementedTodoMamagementServer must be embedded to have forward compatible implementations.
type UnimplementedTodoMamagementServer struct {
}

func (UnimplementedTodoMamagementServer) CreateTodoItem(context.Context, *CreateTodo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodoItem not implemented")
}
func (UnimplementedTodoMamagementServer) GetTodoLists(context.Context, *emptypb.Empty) (*TodoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoLists not implemented")
}
func (UnimplementedTodoMamagementServer) GetTodoItemById(context.Context, *TodoId) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoItemById not implemented")
}
func (UnimplementedTodoMamagementServer) UpdateTodoItem(context.Context, *Todo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoItem not implemented")
}
func (UnimplementedTodoMamagementServer) DeleteTodoItem(context.Context, *TodoId) (*ConfirmMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoItem not implemented")
}
func (UnimplementedTodoMamagementServer) mustEmbedUnimplementedTodoMamagementServer() {}

// UnsafeTodoMamagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoMamagementServer will
// result in compilation errors.
type UnsafeTodoMamagementServer interface {
	mustEmbedUnimplementedTodoMamagementServer()
}

func RegisterTodoMamagementServer(s grpc.ServiceRegistrar, srv TodoMamagementServer) {
	s.RegisterService(&TodoMamagement_ServiceDesc, srv)
}

func _TodoMamagement_CreateTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoMamagementServer).CreateTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoDemo.TodoMamagement/CreateTodoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoMamagementServer).CreateTodoItem(ctx, req.(*CreateTodo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoMamagement_GetTodoLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoMamagementServer).GetTodoLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoDemo.TodoMamagement/GetTodoLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoMamagementServer).GetTodoLists(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoMamagement_GetTodoItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoMamagementServer).GetTodoItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoDemo.TodoMamagement/GetTodoItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoMamagementServer).GetTodoItemById(ctx, req.(*TodoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoMamagement_UpdateTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoMamagementServer).UpdateTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoDemo.TodoMamagement/UpdateTodoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoMamagementServer).UpdateTodoItem(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoMamagement_DeleteTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoMamagementServer).DeleteTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoDemo.TodoMamagement/DeleteTodoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoMamagementServer).DeleteTodoItem(ctx, req.(*TodoId))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoMamagement_ServiceDesc is the grpc.ServiceDesc for TodoMamagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoMamagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoDemo.TodoMamagement",
	HandlerType: (*TodoMamagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodoItem",
			Handler:    _TodoMamagement_CreateTodoItem_Handler,
		},
		{
			MethodName: "GetTodoLists",
			Handler:    _TodoMamagement_GetTodoLists_Handler,
		},
		{
			MethodName: "GetTodoItemById",
			Handler:    _TodoMamagement_GetTodoItemById_Handler,
		},
		{
			MethodName: "UpdateTodoItem",
			Handler:    _TodoMamagement_UpdateTodoItem_Handler,
		},
		{
			MethodName: "DeleteTodoItem",
			Handler:    _TodoMamagement_DeleteTodoItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todogrpc/todo.proto",
}
